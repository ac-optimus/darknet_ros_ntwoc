// Generated by gencpp from file topicImgThreadcpp/BoundingBoxArray.msg
// DO NOT EDIT!


#ifndef TOPICIMGTHREADCPP_MESSAGE_BOUNDINGBOXARRAY_H
#define TOPICIMGTHREADCPP_MESSAGE_BOUNDINGBOXARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <topicImgThreadcpp/BoundingBox.h>

namespace topicImgThreadcpp
{
template <class ContainerAllocator>
struct BoundingBoxArray_
{
  typedef BoundingBoxArray_<ContainerAllocator> Type;

  BoundingBoxArray_()
    : message()  {
    }
  BoundingBoxArray_(const ContainerAllocator& _alloc)
    : message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::topicImgThreadcpp::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::topicImgThreadcpp::BoundingBox_<ContainerAllocator> >::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBoxArray_

typedef ::topicImgThreadcpp::BoundingBoxArray_<std::allocator<void> > BoundingBoxArray;

typedef boost::shared_ptr< ::topicImgThreadcpp::BoundingBoxArray > BoundingBoxArrayPtr;
typedef boost::shared_ptr< ::topicImgThreadcpp::BoundingBoxArray const> BoundingBoxArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace topicImgThreadcpp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'topicImgThreadcpp': ['/home/ac-optimus/video/darknet_ros_ntwoc/src/topicImgThreadcpp/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1aa11c9a83d4975fd5f1e8b9d0289f2";
  }

  static const char* value(const ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1aa11c9a83d4975ULL;
  static const uint64_t static_value2 = 0xfd5f1e8b9d0289f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topicImgThreadcpp/BoundingBoxArray";
  }

  static const char* value(const ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BoundingBox[] message\n\
\n\
================================================================================\n\
MSG: topicImgThreadcpp/BoundingBox\n\
int64 Class\n\
float64 probability\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
";
  }

  static const char* value(const ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBoxArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topicImgThreadcpp::BoundingBoxArray_<ContainerAllocator>& v)
  {
    s << indent << "message[]" << std::endl;
    for (size_t i = 0; i < v.message.size(); ++i)
    {
      s << indent << "  message[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::topicImgThreadcpp::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.message[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPICIMGTHREADCPP_MESSAGE_BOUNDINGBOXARRAY_H
